name: Frontend CI/CD (Docker + Compose)

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'app/**'
      - 'components/**'
      - 'api/**'
      - 'contexts/**'
      - 'lib/**'
      - 'package.json'
      - 'package-lock.json'
      - 'next.config.mjs'
      - 'tailwind.config.ts'
      - 'tsconfig.json'
      - 'Dockerfile'
      - '.github/workflows/frontend.yml'
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

concurrency:
  group: frontend-cicd
  cancel-in-progress: true

env:
  NODE_VERSION: '18'
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN:    ${{ secrets.DOCKERHUB_TOKEN }}
  # Docker build context (Î£®Ìä∏Í∞Ä ÏïÑÎãå Ìè¥ÎçîÎ©¥ ./front Ï≤òÎüº Î∞îÍøî)
  FRONTEND_CONTEXT: '.'
  # ÎπåÎìú ÌÉÄÏûÑÏóê JS Î≤àÎì§Ïóê Î∞ïÌûê Î∞±ÏóîÎìú API URL
  NEXT_PUBLIC_SPRING_API_URL: ${{ secrets.NEXT_PUBLIC_SPRING_API_URL }}
  # ÏµúÏ¢Ö Ìë∏ÏãúÎê† Ïù¥ÎØ∏ÏßÄ Ïù¥Î¶Ñ
  FRONTEND_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/seoul-bike-frontend

jobs:
  test-and-build:
    name: üîß Lint & Typecheck (non-blocking)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install deps
        run: npm ci

      - name: ESLint
        run: npx eslint . --ext .js,.jsx,.ts,.tsx || echo "‚ö†Ô∏è ESLint issues (non-blocking)"

      - name: Type check
        run: npx tsc --noEmit || echo "‚ö†Ô∏è TS issues (non-blocking)"

      - name: Local build smoke
        env:
          NEXT_PUBLIC_SPRING_API_URL: ${{ env.NEXT_PUBLIC_SPRING_API_URL }}
        run: |
          echo "Using NEXT_PUBLIC_SPRING_API_URL=${NEXT_PUBLIC_SPRING_API_URL}"
          npm run build || echo "‚ö†Ô∏è Local build failed (non-blocking). Docker build will proceed."

  docker-build-and-push:
    name: üê≥ Build & Push Docker image
    needs: test-and-build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Build & Push (latest + commit sha)
        uses: docker/build-push-action@v5
        with:
          context: ${{ env.FRONTEND_CONTEXT }}
          push: true
          tags: |
            ${{ env.FRONTEND_IMAGE }}:latest
            ${{ env.FRONTEND_IMAGE }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NEXT_PUBLIC_SPRING_API_URL=${{ env.NEXT_PUBLIC_SPRING_API_URL }}

  deploy:
    name: üöÄ Deploy to EC2 (docker-compose)
    needs: docker-build-and-push
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Check server secrets
        id: check
        run: |
          ok=1
          [ -z "${{ secrets.SERVER_HOST }}" ] && echo "‚ùå SERVER_HOST missing" && ok=0
          [ -z "${{ secrets.SERVER_USERNAME }}" ] && echo "‚ùå SERVER_USERNAME missing" && ok=0
          [ -z "${{ secrets.SERVER_SSH_KEY }}" ] && echo "‚ùå SERVER_SSH_KEY missing" && ok=0
          if [ "$ok" = "1" ]; then echo "server_configured=true"  >> $GITHUB_OUTPUT; else echo "server_configured=false" >> $GITHUB_OUTPUT; fi

      - name: Deploy via SSH
        if: steps.check.outputs.server_configured == 'true'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host:     ${{ secrets.SERVER_HOST }}      # e.g. 52.78.191.110
          username: ${{ secrets.SERVER_USERNAME }}  # e.g. ubuntu
          key:      ${{ secrets.SERVER_SSH_KEY }}   # pem ÎÇ¥Ïö©
          port:     ${{ secrets.SERVER_PORT || 22 }}
          script: |
            set -e
            cd ~/app
            # ÌîÑÎ°†Ìä∏Îßå Î°§ÎßÅ ÏóÖÎç∞Ïù¥Ìä∏ (compose ÏÇ¨Ïö©)
            docker-compose pull frontend
            docker-compose up -d --force-recreate --no-deps frontend
            docker image prune -f || true
            echo "Health check:"
            curl -I http://127.0.0.1:3000 || true

      - name: Skip (no server secrets)
        if: steps.check.outputs.server_configured != 'true'
        run: echo "‚ÑπÔ∏è Deployment skipped: server secrets not configured."
