name: Frontend CI/CD (Docker)

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'app/**'
      - 'components/**'
      - 'api/**'
      - 'contexts/**'
      - 'lib/**'
      - 'package.json'
      - 'package-lock.json'
      - 'next.config.mjs'
      - 'tailwind.config.ts'
      - 'tsconfig.json'
      - 'Dockerfile'
      - '.github/workflows/frontend.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'app/**'
      - 'components/**'
      - 'api/**'
      - 'contexts/**'
      - 'lib/**'
      - 'package.json'
      - 'package-lock.json'
      - 'next.config.mjs'
      - 'tailwind.config.ts'
      - 'tsconfig.json'
      - 'Dockerfile'
      - '.github/workflows/frontend.yml'
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  NEXT_PUBLIC_SPRING_API_URL: ${{ secrets.NEXT_PUBLIC_SPRING_API_URL }}

jobs:
  test-and-build:
    name: üîß Test & Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint || true  # ÌïÑÏöîÌïòÎ©¥ Ïã§Ìå® ÌóàÏö© Ï†úÍ±∞

      - name: Type check
        run: npx tsc --noEmit || true  # ÌïÑÏöîÌïòÎ©¥ Ïã§Ìå® ÌóàÏö© Ï†úÍ±∞

      # Î°úÏª¨ ÎπåÎìúÎäî ÏÑ†ÌÉù. ÎèÑÏª§ÏóêÏÑú Ïñ¥Ï∞®Ìîº Îã§Ïãú ÎπåÎìúÌïòÎØÄÎ°ú Ï∫êÏπòÏö©ÏúºÎ°úÎßå Îë†
      - name: Build (local check)
        run: |
          echo "NEXT_PUBLIC_SPRING_API_URL=${NEXT_PUBLIC_SPRING_API_URL:-http://localhost:8080}"
          NEXT_PUBLIC_SPRING_API_URL="${NEXT_PUBLIC_SPRING_API_URL:-http://localhost:8080}" npm run build
        env:
          NEXT_PUBLIC_SPRING_API_URL: ${{ env.NEXT_PUBLIC_SPRING_API_URL }}

  docker-build-and-push:
    name: üê≥ Build & Push Docker Image
    needs: test-and-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKERHUB_USERNAME }}/seoul-bike-frontend
          tags: |
            type=ref,event=branch
            type=sha,prefix=main-
            type=raw,value=latest,enable=true

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NEXT_PUBLIC_SPRING_API_URL=${{ env.NEXT_PUBLIC_SPRING_API_URL != '' && env.NEXT_PUBLIC_SPRING_API_URL || 'http://localhost:8080' }}

  deploy:
    name: üöÄ Deploy to EC2
    needs: docker-build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Check server secrets
        id: check-secrets
        run: |
          if [ -n "${{ secrets.SERVER_HOST }}" ] && [ -n "${{ secrets.SERVER_USERNAME }}" ] && [ -n "${{ secrets.SERVER_SSH_KEY }}" ]; then
            echo "server_configured=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Server secrets configured"
          else
            echo "server_configured=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è SERVER_HOST / SERVER_USERNAME / SERVER_SSH_KEY ÎØ∏ÏÑ§Ï†ï. Î∞∞Ìè¨ Ïä§ÌÇµ"
          fi

      - name: Deploy via SSH
        if: steps.check-secrets.outputs.server_configured == 'true'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            docker stop seoul-bike-frontend || true
            docker rm seoul-bike-frontend || true
            docker pull ${{ env.DOCKERHUB_USERNAME }}/seoul-bike-frontend:latest
            docker run -d \
              --name seoul-bike-frontend \
              --restart unless-stopped \
              -p 3000:3000 \
              ${{ env.DOCKERHUB_USERNAME }}/seoul-bike-frontend:latest
            docker image prune -f

  security-scan:
    name: üõ°Ô∏è Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          ignore-unfixed: true
      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  notify:
    name: üì¢ Notify Result
    needs: [test-and-build, docker-build-and-push]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Success
        if: success()
        run: echo "‚úÖ Frontend CI/CD completed successfully!"
      - name: Failure
        if: failure()
        run: |
          echo "‚ùå Frontend CI/CD failed!"
          echo "üîç Check the logs for more details"
